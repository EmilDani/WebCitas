/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.28
 * Generated at: 2015-12-15 02:58:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import webcitas.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.text.*;

public final class recomendaciones_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/navigation_top_bar.jsp", Long.valueOf(1450148218000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("webcitas");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	User user = (User) session.getAttribute("usuario");

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("<title>Elección de citas</title>\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" href=\"base_style.css\" typ=\"text/css\">\n");
      out.write("<link rel=\"stylesheet\"\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\"\n");
      out.write("\tintegrity=\"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7\"\n");
      out.write("\tcrossorigin=\"anonymous\">\n");
      out.write("</head>\n");
      out.write("<body class=\"body_back\">\n");
      out.write("\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("\r\n");
      out.write("\t<nav class=\"navbar navbar-fixed-top bs-docs-nav\" role=\"banner\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"container-fluid\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"navbar-header\">\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"navbar-toggle collapsed\"\r\n");
      out.write("\t\t\t\t\tdata-toggle=\"collapse\" data-target=\"#arrejunto\"\r\n");
      out.write("\t\t\t\t\taria-expanded=\"false\">\r\n");
      out.write("\t\t\t\t\t<span class=\"sr-only\">Toggle navigation</span> <span\r\n");
      out.write("\t\t\t\t\t\tclass=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span\r\n");
      out.write("\t\t\t\t\t\tclass=\"icon-bar\"></span>\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t\t<a class=\"navbar-brand\" href=\"#\">Meetstoric</a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"collapse navbar-collapse\"\r\n");
      out.write("\t\t\t\tid=\"arrejunto\">\r\n");
      out.write("\t\t\t\t<ul class=\"nav navbar-nav\">\r\n");
      out.write("\t\t\t\t\t<li class=\"active\"><a href=\"/meetstoric/mainView\"\r\n");
      out.write("\t\t\t\t\t\tclass=\"top_button\" title=\"mainView\">Inicio<span class=\"sr-only\">(current)</span></a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/meetstoric/citas\" class=\"top_button\"\r\n");
      out.write("\t\t\t\t\t\ttitle=\"Citas\">Citas</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/meetstoric/sugerencias\" class=\"top_button\"\r\n");
      out.write("\t\t\t\t\t\ttitle=\"Recomendaciones\">Sugerencias</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<li><a href=\"/meetstoric/cierreSesion\" class=\"top_button\"\r\n");
      out.write("\t\t\t\t\t\tonclick=\"\" title=\"Cerrar Sesión\">Cerrar Sesión</a></li>\r\n");
      out.write("\t\t\t\t\t<li><a\r\n");
      out.write("\t\t\t\t\t\thref=\"");
      out.print(response.encodeURL("profile?id=" + user.getId()));
      out.write("\"\r\n");
      out.write("\t\t\t\t\t\tclass=\"top_button\" onclick=\"\" title=\"Mi perfil\">Mi Perfil</a></li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</nav>\r\n");
      out.write("</header>");
      out.write("\n");
      out.write("\t\n");
      out.write("\t<div class=\"container jumbotron semi_back\">\n");
      out.write("\t\n");
      out.write("\t<header class=\"page-header\">\n");
      out.write("\t\n");
      out.write("\t<h2 align=\"center\">Usuarios recomendados para ti:</h2>\n");
      out.write("\t\n");
      out.write("\t</header>\n");
      out.write("\n");
      out.write("\t<div class=\"container jumbotron table-responsive jumbotron_even\">\n");
      out.write("\n");
      out.write("\t\t\n");
      out.write("\n");
      out.write("\t\t");

			boolean recomendados_error = (boolean) request.getAttribute("recomendaciones_error");
			if (recomendados_error) {
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<h4>No hay usuarios recomendados para ti. Tu horrorífica persona\n");
      out.write("\t\t\tha vencido a nuestro poderoso algoritmo.</h4>\n");
      out.write("\n");
      out.write("\t\t");

			} else {
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t");

			boolean fecha_error = (boolean) request.getAttribute("fecha_error"); // ESTO NO ESTÁ BIEN
				if (fecha_error) {
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t<h4>EH! Pon una fecha bien Marty Macfly. Recuerda que no\n");
      out.write("\t\t\treservamos con más de 14 días de antelación</h4>\n");
      out.write("\n");
      out.write("\t\t");

			}
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t");

			List<User> listaUsuarios = (List<User>) request.getAttribute("listaUsuarios");
				Date hoy = new java.util.Date();
				Calendar calendario = Calendar.getInstance();
				calendario.setTime(hoy);
				calendario.add(Calendar.DAY_OF_YEAR, 14); // Sumamos los días
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		
      out.write("\n");
      out.write("\n");
      out.write("\t\t");
      out.write("\n");
      out.write("\n");
      out.write("\t\t<table class=\"table table-striped\">\n");
      out.write("\t\t\t<thead>\n");
      out.write("\t\t\t\t<tr class=\"row\">\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">NickName</th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">Año de nacimiento</th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">Interesado/a en</th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">Edad Máxima</th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">Edad Mínima</th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\"></th>\n");
      out.write("\t\t\t\t\t<th class=\"col-md-1\">Elija una fecha para su cita</th>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t</thead>\n");
      out.write("\n");
      out.write("\t\t\t<div class=\"row\">\n");
      out.write("\n");
      out.write("\t\t\t\t<p></p>\n");
      out.write("\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

				for (User usuario : listaUsuarios) {
			
      out.write("\n");
      out.write("\t\t\t\t<tr class=\"row\">\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\"><a\n");
      out.write("\t\t\t\t\t\thref=\"");
      out.print(response.encodeURL("profile?id=" + usuario.getId()));
      out.write('"');
      out.write('>');
      out.print(usuario.getNickname());
      out.write("</a></td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\">");
      out.print(usuario.getYear());
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\">");
      out.print(usuario.getDesired_sex());
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\">");
      out.print(usuario.getDesired_year_max());
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\">");
      out.print(usuario.getDesired_year_min());
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\"><form class=\"form-group\" action=\"citar\" method=\"get\"></td>\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\">\n");
      out.write("\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<input type=\"hidden\" name=\"recId\"\n");
      out.write("\t\t\t\t\t\tvalue=\"");
      out.print(usuario.getId());
      out.write("\">\n");
      out.write("\t\t\t\t\t<input class=\"input-group\" type=\"date\" name=\"fecha\"\n");
      out.write("\t\t\t\t\t\tmin=\"");
      out.print(df.format(hoy));
      out.write("\"\n");
      out.write("\t\t\t\t\t\tmax=\"");
      out.print(df.format(calendario.getTime()));
      out.write("\">\n");
      out.write("\t\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t\t<!-- class=\"form-control\" -->\n");
      out.write("\t\t\t\t\t<td class=\"col-md-1\"><input class=\"btn success_button\" type=\"submit\" value=\"Pedir Cita\"\n");
      out.write("\t\t\t\t\t\tstyle=\"font-size: 14px;\"></form>\n");
      out.write("\t\t\t\t\t</td>\n");
      out.write("\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\n");
      out.write("\t\t\t");

				}
			
      out.write("\n");
      out.write("\t\t</table>\n");
      out.write("\n");
      out.write("\t\t");

			}
		
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
